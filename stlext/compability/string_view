// Copyright (c) 2018, Michael Polukarov (Russia).
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
// - Redistributions of source code must retain the above copyright
//   notice, this list of conditions and the following disclaimer.
//
// - Redistributions in binary form must reproduce the above copyright
//   notice, this list of conditions and the following disclaimer listed
//   in this license in the documentation and/or other materials
//   provided with the distribution.
//
// - Neither the name of the copyright holders nor the names of its
//   contributors may be used to endorse or promote products derived from
//   this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#pragma once
#if STDX_CMPLR_GNU && (STDX_CMPLR_GNU >= 500)
#include <experimental/string_view>
#include "../platform/common.h"

_STDX_BEGIN
    using std::experimental::basic_string_view;
    using std::experimental::string_view;
    using std::experimental::wstring_view;
    using std::experimental::u16string_view;
    using std::experimental::u32string_view;
_STDX_END

#else

#include <utility>
#include "cxx17/basic_string_view.hpp"

// expose to std namespace

namespace std {
    using stdx::basic_string_view;
    using stdx::string_view;
    using stdx::wstring_view;
    using stdx::u16string_view;
    using stdx::u32string_view;

    using stdx::operator<<;

// 21.4.5 Hash support

    template<class _Elem, class _Traits>
    struct hash<stdx::basic_string_view<_Elem, _Traits> > {
        typedef stdx::basic_string_view<_Elem, _Traits> argument_type;
        typedef size_t result_type;

        inline size_t operator()(const argument_type &x) const {
            return x.hash_code();
        }
    };

}  // end namespace std

#endif
